name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache PyInstaller
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pyinstaller
            build
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build Windows executable
        run: |
          pyinstaller --onefile --name musestat --console main.py
      
      - name: Rename Windows executable
        run: |
          mv dist/musestat.exe dist/musestat-windows-x64.exe
      
      - name: Upload Windows executable
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} ./dist/musestat-windows-x64.exe --clobber

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache PyInstaller
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pyinstaller
            build
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build Linux executable
        run: |
          pyinstaller --onefile --name musestat --console main.py
      
      - name: Rename Linux executable
        run: |
          mv dist/musestat dist/musestat-linux-x64
      
      - name: Upload Linux executable
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} ./dist/musestat-linux-x64 --clobber

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Cache PyInstaller
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pyinstaller
            build
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build macOS executable
        run: |
          pyinstaller --onefile --name musestat --console main.py
      
      - name: Rename macOS executable
        run: |
          mv dist/musestat dist/musestat-macos-x64
      
      - name: Upload macOS executable
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} ./dist/musestat-macos-x64 --clobber

  update-version:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update version.json
        run: |
          VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')
          echo "{" > version.json
          echo "  \"version\": \"$VERSION\"," >> version.json
          echo "  \"release_date\": \"$(date +%Y-%m-%d)\"," >> version.json
          echo "  \"release_notes_url\": \"https://github.com/Tfc538/MuseStat/releases/tag/${{ github.event.release.tag_name }}\"" >> version.json
          echo "}" >> version.json
      
      - name: Commit version update
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add version.json
          git commit -m "Update version.json for release ${{ github.event.release.tag_name }}" || echo "No changes to commit"
          git push || echo "Nothing to push"

